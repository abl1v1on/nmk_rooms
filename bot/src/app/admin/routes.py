import re
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from string import ascii_letters, digits

from . import utils
from . import keyboards
from .filters import IsAdmin
from .forms import (
    CreateUserForm,
    CreateLocationForm,
    CreateRoomForm,
    CreateEquipmentForm
)


router = Router(name='admin_router')
is_admin = IsAdmin()


@router.message(or_f(Command('admin'), F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'), is_admin)
async def handle_admin_cmd(message: Message) -> None:
    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!',
        reply_markup=keyboards.admin_kb
    )


@router.message(F.text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë•', is_admin)
async def handle_users_admin_cmd(message: Message) -> None:
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=keyboards.admin_users_kb
    )


@router.message(F.text == 'üó∫ –õ–æ–∫–∞—Ü–∏–∏ üó∫', is_admin)
async def handle_locations_admin_cmd(message: Message) -> None:
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=keyboards.admin_locations_kb
    )


@router.message(F.text == 'üè† –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü –∑–∞–ª—ã üè†', is_admin)
async def handle_rooms_admin_cmd(message: Message) -> None:
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=keyboards.admin_rooms_kb
    )


@router.message(F.text == 'üíª –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üíª')
async def handle_equipments_admin_cmd(message: Message) -> None:
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=keyboards.admin_equipments_kb
    )



@router.message(F.text == 'üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üë§', is_admin)
async def handle_add_user_cmd(message: Message, state: FSMContext) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await state.set_state(CreateUserForm.email)


@router.message(CreateUserForm.email)
async def set_user_email_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email
    email = message.text
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+$'

    if re.match(pattern, email) is None:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π email')
        return

    await state.update_data(email=email)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await state.set_state(CreateUserForm.first_name)


@router.message(CreateUserForm.first_name)
async def set_user_first_name_state(message: Message, state: FSMContext) -> None:
    first_name = message.text

    if not (2 <= len(first_name) <= 30):
        await message.answer(
            '–î–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Å–∏–º–≤–æ–ª–æ–≤'
        )
        return

    allowed_letters = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')

    if not set(first_name.lower()).issubset(allowed_letters):
        await message.answer('–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã')
        return

    await state.update_data(first_name=first_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await state.set_state(CreateUserForm.last_name)


@router.message(CreateUserForm.last_name)
async def set_user_last_name_state(message: Message, state: FSMContext) -> None:
    last_name = message.text

    if not (2 <= len(last_name) <= 30):
        await message.answer(
            '–î–ª–∏–Ω–∞ —Ñ–∞–º–∏–ª–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Å–∏–º–≤–æ–ª–æ–≤'
        )
        return

    allowed_letters = set('–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è')

    if not set(last_name.lower()).issubset(allowed_letters):
        await message.answer('–§–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã')
        return

    await state.update_data(last_name=last_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await state.set_state(CreateUserForm.tg_id)


@router.message(CreateUserForm.tg_id)
async def set_user_tg_id_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Telegram ID
    tg_id = message.text

    try:
        tg_id = int(tg_id)
    except ValueError:
        await message.answer(
            'Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä'
        )
        return

    await state.update_data(tg_id=tg_id)
    await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å')
    await state.set_state(CreateUserForm.password)


@router.message(CreateUserForm.password)
async def set_user_password_state(message: Message, state: FSMContext) -> None:
    password = message.text

    if not (8 <= len(password) <= 30):
        await message.answer(
            '–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 8 –¥–æ 30 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Å–∏–º–≤–æ–ª–æ–≤'
        )
        return

    if password.isdigit():
        await message.answer('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        return

    has_upper = False
    has_special_char = False

    special_chars = '!@#$%^&*()'
    allowed_letters = ascii_letters + digits + special_chars

    for char in password:
        if char.isupper() and has_upper is False:
            has_upper = True

        if char in special_chars and has_special_char is False:
            has_special_char = True

        if char not in allowed_letters:
            await message.answer(
                '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª—ã'
            )
            return

    if not has_upper:
        await message.answer('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É')
        return

    if not has_special_char:
        await message.answer('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª')
        return

    await state.update_data(password=password)

    user = await state.get_data()

    try:
        await utils.create_user(user)
        await message.answer('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    except:
        await message.answer('‚ùå –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    finally:
        await state.clear()


@router.message(F.text == 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•', is_admin)
async def handle_users_list_cmd(message: Message) -> None:
    await message.answer('\n'.join(await utils.get_users()))


@router.message(F.text == 'üó∫ –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é üó∫', is_admin)
async def handle_add_location_cmd(message: Message, state: FSMContext) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å')
    await state.set_state(CreateLocationForm.address)


@router.message(CreateLocationForm.address)
async def set_location_address_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å
    address = message.text

    if not (5 <= len(address) <= 255):
        await message.answer(
            '–î–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 255 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Å–∏–º–≤–æ–ª–æ–≤'
        )
        return

    await state.update_data(address=address)
    location = await state.get_data()

    try:
        await utils.create_location(location)
        await message.answer('‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    except:
        await message.answer('‚ùå –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    finally:
        await state.clear()


@router.message(F.text == 'üó∫ –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π üó∫', is_admin)
async def handle_locations_list_cmd(message: Message) -> None:
    await message.answer('\n'.join(await utils.get_locations()))


@router.message(F.text == 'üè† –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü –∑–∞–ª üè†', is_admin)
async def handle_add_room_cmd(message: Message, state: FSMContext) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ª–∞')
    await state.set_state(CreateRoomForm.number)


@router.message(CreateRoomForm.number)
async def set_room_number_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–ª–∞
    number = message.text

    try:
        number = int(number)
    except ValueError:
        await message.answer('–ù–æ–º–µ—Ä –∑–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        return

    if number <= 0:
        await message.answer('–ù–æ–º–µ—Ä –∑–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return

    await state.update_data(number=number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–ª–∞')
    await state.set_state(CreateRoomForm.capacity)


@router.message(CreateRoomForm.capacity)
async def set_room_capacity_state(message: Message, state: FSMContext) -> None:
    capacity = message.text

    try:
        capacity = int(capacity)
    except ValueError:
        await message.answer('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        return

    if capacity <= 0:
        await message.answer('–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∑–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return

    await state.update_data(capacity=capacity)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ª–∞')
    await state.set_state(CreateRoomForm.description)


@router.message(CreateRoomForm.description)
async def set_room_description_state(message: Message, state: FSMContext) -> None:
    description = message.text

    if not (5 <= len(description) <= 100):
        await message.answer(
            '–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Å–∏–º–≤–æ–ª–æ–≤'
        )
        return

    await state.update_data(description=description)
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ "-", –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)'
    )
    await state.set_state(CreateRoomForm.image)


@router.message(CreateRoomForm.image)
async def set_room_image_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Å—ã–ª–∫–µ
    image = message.text

    if image == '-':
        image = None
    else:
        if len(image) >= 10000:
            await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è')
            return

    await state.update_data(image=image)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ª–æ–∫–∞—Ü–∏–∏')
    await state.set_state(CreateRoomForm.location_id)


@router.message(CreateRoomForm.location_id)
async def set_room_location_id_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º Location ID
    location_id = message.text

    try:
        location_id = int(location_id)
    except ValueError:
        await message.answer('ID –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        return

    if location_id <= 0:
        await message.answer('ID –ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è')
        return

    await state.update_data(location_id=location_id)
    room = await state.get_data()

    try:
        await utils.create_room(room)
        await message.answer('‚úÖ –ó–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    except:
        await message.answer('‚ùå –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    finally:
        await state.clear()


@router.message(F.text == 'üè† –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü –∑–∞–ª–æ–≤ üè†', is_admin)
async def handle_rooms_list_cmd(message: Message) -> None:
    await message.answer('\n'.join(await utils.get_rooms()))


@router.message(F.text == 'üíª –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ üíª', is_admin)
async def handle_add_equipment_cmd(message: Message, state: FSMContext) -> None:
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    await state.set_state(CreateEquipmentForm.name)


@router.message(CreateEquipmentForm.name)
async def set_equipment_name_state(message: Message, state: FSMContext) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
    name = message.text

    if not (2 <= len(name) <= 100):
        await message.answer(
            '–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) —Å–∏–º–≤–æ–ª–æ–≤'
        )
        return

    await state.update_data(name=name)

    equipment = await state.get_data()

    try:
        await utils.create_equipment(equipment)
        await message.answer('‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    except:
        await message.answer('‚ùå –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    finally:
        await state.clear()


@router.message(F.text == 'üíª –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è üíª', is_admin)
async def handle_equipments_list_cmd(message: Message) -> None:
    await message.answer('\n'.join(await utils.get_equipments()))
